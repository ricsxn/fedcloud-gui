#!/bin/bash
#
# efc_gui EGI FedCloud GUI application
#
EFCENV=fedcloudenv.sh
DIALOG=$(which dialog)
LOCATE=$(which locate)
VPINIT=$(which voms-proxy-init)
VPDTRY=$(which voms-proxy-destroy)


quit() {
  if [ "$1" = "" ]; then
	RETCODE=0
  else
        RETCODE=$1
  fi
  if [ $SOURCED -eq 1 ]; then
     return $RETCODE
  else
    exit $RETCODE
  fi
}

pre_requisites() {
  # Determine if souced or not
  [ $0 != $BASH_SOURCE ] && SOURCED=1 || SOURCED=0

  if [ "$DIALOG" = "" ]; then
    echo "Unable to find dialog utility, please contact your system administrator to isntall it"
    quit 1
  fi
  if [ "$LOCATE" = "" ]; then
    echo "Unable to find locate utility, please contact your system administrator to install it"
    quit 1
  fi
  if [ "$VPINIT" = "" ]; then
    echo "Unable to find voms-proxy-init command, please contact your system administrator to install it"
    quit 1
  fi
  if [ "$VPDTRY" = "" ]; then
    echo "Unable to find voms-proxy-destrory command, please contact your system administrator to install it"
    quit 1
  fi
  # Try first to locate and source the file
  EFCENVPATH=$($LOCATE $EFCENV)
  if [ "$EFCENVPATH" != "" ]; then
    printf "EFC environment found at $EFCENVPATH, sourcing it ... "
    . $EFCENVPATH
    RES=$?
    if [ $RES -eq 0 ]; then
      echo "ok"
    else
      echo "fail"
      quit 1
    fi
  else
    echo "It seems EFC environment variables have not been sourced"
    quit 1
  fi
  # Retrieve last used values
  [ -f $LAST_OCCI_ENDPOINT ] && OCCI_ENDPOINT=$(cat $LAST_OCCI_ENDPOINT)
  [ -f $LAST_OCCI_VOMS     ] && OCCI_VOMS=$(cat $LAST_OCCI_VOMS)
  [ -f $LAST_OS_TPL        ] && OS_TPL=$(cat $LAST_OS_TPL)
  [ -f $LAST_RES_TPL       ] && RES_TPL=$(cat $LAST_RES_TPL)
  [ -f $LAST_OCCI_RES      ] && OCCI_RES=$(cat $LAST_OCCI_RES)
}

main_window() {
  TMP=$(mktemp)
  CHC=$(mktemp)
  efc_show_conf >$TMP 
  chkproxy
  RES=$?
  if [ $RES -eq 0 ]; then
    efc_show_conf > $TMP
  fi 
  MSGCONTENT=$(cat $TMP)
  rm -f $TMP
  dialog --backtitle "EGI FedCloud GUI"\
         --clear\
         --title "title"\
         --default-item "defitem"\
         --ok-label "Select"\
         --help-button --help-label "Help"\
         --extra-button --extra-label "Configure"\
         --exit-label "Exit"\
         --menu "$MSGCONTENT" 30 80 26 \
         "VOs"       "Show or select available VOs" \
         "Endpoints" "Show or select one endpoint" \
         "Templates" "Show or select one endpoint template" \
         "ResTemplates" "Show or select one resource template" \
         "Resources" "Show or select one available resource"  2>$CHC
  RES=$?
  case $RES in
    0)  case $(cat $CHC) in
        "VOs") vos ;;
        "Endpoints")    endpoints ;;
        "Templates")    templates ;;
        "Resources")    resources ;;
        "ResTemplates") restemplates;;
        *) ;;
       esac;;
    1) confirm_exit;;
  255) confirm_exit;;
    *) confirm_exit;;
  esac
  rm -f $CHC
}

confirm_exit() {
  dialog --title "Exit" \
         --yesno "Are you sure you want to exit?" 7 60

  # Get exit status
  #   0 means user hit [yes] button.
  #   1 means user hit [no] button.
  # 255 means user hit [Esc] key.
  response=$?
  case $response in
     0) LOOP=0;;
     1) LOOP=1;;
   255) LOOP=1;;
  esac
}

endpoints() {
  TMP=$(mktemp)
  CHC=$(mktemp)
  efc_list_endpoints >$TMP
  dialog --clear\
         --title "Endpoints"\
         --menu  "Please select one of the available endpoints"  20 70 16 \
         $(cat $TMP) 2>$CHC
  RES=$?
  case $RES in
     0) OCCI_ENDPOINT=$(cat $TMP | grep $(cat $CHC) | awk '{ print $2 }')
        echo $OCCI_ENDPOINT > $LAST_OCCI_ENDPOINT
  esac
  rm -f $TMP
  rm -f $CHC
}

templates() {
 TMP=$(mktemp)
 CHC=$(mktemp)
 TPLMSG=$(mktemp)
 efc_templates > $TMP
 RES=$?
 if [ $RES -ne 0 ]; then
   dialog --title "Alert" --msgbox "Sorry, unable to retrieve templates\n$(cat $TPLMSG)\n" 6 60
 else
   MENUDLG='dialog --title "Templates" --menu  "Please select one of the available templates"  20 70 16'
   MENUITM=$(cat $TMP | tr '\n' ' ')
   CMD="$MENUDLG $MENUITM"
   eval $CMD 2>$CHC
    RES=$?
    case $RES in
       0) OS_TPL=$(cat $OCCI_TEMPLATES | grep $(cat $CHC) | awk '{ print $1 }')
          echo $OS_TPL > $LAST_OS_TPL
    esac
 fi  
 rm -f $TPLMSG
 rm -f $CHC
 rm -f $TMP
}

chkproxy() {
  if [ $NEEDPROXY -ne 0 ]; then
    CHC=$(mktemp)
    dialog --title "Generating proxy ..." \
           --clear \
           --passwordbox "Generating a proxy for VO: '"$OCCI_VOMS"';\nEnter your passphrase:" 10 50 2> $CHC
    RES=$?

    case $RES in
       0)
          VPIMSG=$(mktemp)
          cat $CHC | $VPINIT --voms $OCCI_VOMS --rfc --pwstdin 2>>$VPIMSG >>$VPIMSG
          RES=$?
          if [ $RES -eq 0 ]; then
            NEEDPROXY=0
          else
            dialog --title "Alert" --msgbox "Sorry, unable to create proxy:\n$(cat $VPIMSG)\n" 14 60
          fi
          rm -f $VPIMSG
    esac
    rm -f $CHC
  fi
  return $NEEDPROXY
}

vos() {
  TMP=$(mktemp)
  CHC=$(mktemp)
  efc_list_vomses >$TMP
  dialog --clear\
         --title "VOs"\
         --menu  "Please select one of the available VOs"  20 70 16 \
         $(cat $TMP) 2>$CHC
  RES=$?
  case $RES in
     0) OCCI_VOMS=$(cat $TMP | grep $(cat $CHC) | awk '{ print $2 }')
        echo $OCCI_VOMS > $LAST_OCCI_VOMS
  esac
  rm -f $TMP
  rm -f $CHC
  OCCI_VOMS_VO=$(voms-proxy-info --vo)
  if [ "$OCCI_VOMS_VO" = "" -o "$OCCI_VOMS_VO" != $OCCI_VOMS ]; then
    $VPDTRY --quiet 
  fi
}

resources() {
 TMP=$(mktemp)
 CHC=$(mktemp)
 TPLMSG=$(mktemp)
 efc_resources > $TMP
 RES=$?
 if [ $RES -ne 0 ]; then
   dialog --title "Alert" --msgbox "Sorry, unable to retrieve resources\n$(cat $TPLMSG)\n" 6 60
 else
   MENUDLG='dialog --title "Endpoints" --menu  "Please select one of the available resources"  20 70 16'
   MENUITM=$(cat $TMP | tr '\n' ' ')
   CMD="$MENUDLG $MENUITM"
   eval $CMD 2>$CHC
    RES=$?
    case $RES in
       0) OCCI_RES=$(cat $OCCI_RESOURCES | grep $(cat $CHC) | awk '{ print $1 }')
          echo $OCCI_RES > $LAST_OCCI_RES
    esac
 fi
 rm -f $TPLMSG
 rm -f $CHC
 rm -f $TMP
}

restemplates() {
 TMP=$(mktemp)
 CHC=$(mktemp)
 TPLMSG=$(mktemp)
 efc_restemplates > $TMP
 RES=$?
 if [ $RES -ne 0 ]; then
   dialog --title "Alert" --msgbox "Sorry, unable to retrieve resource templates\n$(cat $TPLMSG)\n" 6 60
 else
   MENUDLG='dialog --title "Resource endpoints" --menu  "Please select one of the available resource templates"  20 70 16'
   MENUITM=$(cat $TMP | tr '\n' ' ')
   CMD="$MENUDLG $MENUITM"
   eval $CMD 2>$CHC
    RES=$?
    case $RES in
       0) RES_TPL=$(cat $OCCI_RESTEMPLATES | grep "#"$(cat $CHC) | awk '{ print $1 }' | xargs echo)
          echo $RES_TPL > $LAST_RES_TPL
    esac
 fi
 rm -f $TPLMSG
 rm -f $CHC
 rm -f $TMP  
}

#
# BEGIN
#
pre_requisites
LOOP=1
while [ $LOOP -ne 0 ]; do
  main_window
done
#Reporting
clear
efc_show_conf
if [ $SOURCED -ne 0 ]; then
  export OCCI_ENDPOINT
  export OCCI_VOMS  
  export USER_CRED 
  export USER_PUBKEY
  export OS_TPL
  export RES_TPL
  export OCCI_RES
  echo "Variables above have been exported"
else
  echo "Cut&Paste following text to setup variables"
  echo "export OCCI_ENDPOINT=$OCCI_ENDPOINT"
  echo "export OCCI_VOMS=$OCCI_VOMS"
  echo "export USER_CRED=$USER_CRED"
  echo "export USER_PUBKEY=$USER_PUBKEY"
  echo "export OS_TPL=$OS_TPL"
  echo "export RES_TPL=$RES_TPL"
  echo "export OCCI_RES=$OCCI_RES"
fi
